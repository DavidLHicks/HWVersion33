<?xml version="1.0" encoding="UTF-8"?>
<root>
  <item name="java.util.concurrent.BlockingDeque E takeFirst()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingDeque E takeLast()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingDeque boolean offerFirst(E, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingDeque boolean offerLast(E, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingDeque void putFirst(E) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingDeque void putLast(E) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingQueue E poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingQueue E take()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingQueue boolean offer(E, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingQueue int drainTo(java.util.Collection&lt;? super E&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingQueue int drainTo(java.util.Collection&lt;? super E&gt;, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.BlockingQueue void put(E) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.CompletableFuture java.util.concurrent.CompletableFuture&lt;java.lang.Void&gt; runAsync(java.lang.Runnable, java.util.concurrent.Executor)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.CompletionService java.util.concurrent.Future&lt;V&gt; poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.CompletionService java.util.concurrent.Future&lt;V&gt; submit(java.lang.Runnable, V)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.CompletionService java.util.concurrent.Future&lt;V&gt; submit(java.lang.Runnable, V) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.CompletionService java.util.concurrent.Future&lt;V&gt; submit(java.util.concurrent.Callable&lt;V&gt;)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.CompletionService java.util.concurrent.Future&lt;V&gt; submit(java.util.concurrent.Callable&lt;V&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V put(K, V) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V put(K, V) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V remove(java.lang.Object) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentMap V putIfAbsent(K, V) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentMap V replace(K, V) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentMap V replace(K, V) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentMap boolean remove(java.lang.Object, java.lang.Object) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentMap boolean replace(K, V, V) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentMap boolean replace(K, V, V) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentMap boolean replace(K, V, V) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet ConcurrentSkipListSet(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet ConcurrentSkipListSet(java.util.SortedSet&lt;E&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList CopyOnWriteArrayList(E[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList CopyOnWriteArrayList(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.CountDownLatch boolean await(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.Delayed long getDelay(java.util.concurrent.TimeUnit) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.Executor void execute(java.lang.Runnable) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ExecutorService T invokeAny(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ExecutorService T invokeAny(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="java.util.concurrent.ExecutorService T invokeAn